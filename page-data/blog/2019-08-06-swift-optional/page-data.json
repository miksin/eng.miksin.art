{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2019-08-06-swift-optional","result":{"data":{"site":{"siteMetadata":{"title":"Miksin, Software Engineer","subtitles":["Hello! I am Miksin","I'm a Software Engineer","I'm Painting","I'm Programming","I come from TAIWAN"],"description":"Software Engineer","author":"Miksin","links":[{"name":"Home","path":"/"},{"name":"About","path":"/about"},{"name":"Blog","path":"/blog"}],"socialLinks":[{"name":"github","link":"https://github.com/miksin"},{"name":"twitter","link":"https://twitter.com/miksin_"},{"name":"instagram","link":"https://www.instagram.com/miksin_/"},{"name":"pixiv","link":"https://pixiv.me/miksin"},{"name":"youtube","link":"https://www.youtube.com/channel/UCmYleBoaTtNtPVZkaUwFxOw"}]}},"page":{"html":"<h2>前言</h2>\n<p>我們有時候會需要讓變數有可能會是「空值」，這在每個程式語言都有可能有這個需求。\n但Swift為此設計了許多配套措施，讓一切使用上變得很順暢又十分有趣，因此在這裡記下筆記。</p>\n<!-- more -->\n<hr>\n<h2><code class=\"language-text\">Optional</code> and <code class=\"language-text\">nil</code></h2>\n<p>前言提到我們需要讓變數可能是空值，我們這裡舉個例子來想像這個問題。</p>\n<p>我想要紀錄朋友們的資訊，因此寫了一個名為 <em>Person</em> 的 class ：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> alice <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alice\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>alice<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// alice</span></code></pre></div>\n<p>我紀錄了一個名為 <em>alice</em> 的好友的資訊。不過可以的話除了名字之外我還想知道<del>她有沒有男朋友</del></p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">var</span> lover<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> lover<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>lover <span class=\"token operator\">=</span> lover\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> alice <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alice\"</span><span class=\"token punctuation\">,</span> lover<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>alice<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// alice</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>alice<span class=\"token punctuation\">.</span>lover<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>新增了一個名為lover的boolean值欄位，我只要用<code class=\"language-text\">true</code>或<code class=\"language-text\">false</code>來填上就行了。\n但是其實這裡似乎有設計上的問題：在我新增這筆資料時，我可能還不知道她有沒有情人呀！</p>\n<p>我可能今天才交了一個朋友，第一天就問這種問題也有點奇怪，所以還只能記上名字。\n即便我知道答案是<code class=\"language-text\">true</code>並一開始就紀錄了，但也是可能在某天聽聞這樣的風聲「alice好像跟學長分手了耶」，那我應該立刻將這個欄位改為<code class=\"language-text\">false</code>嗎？果然還沒確認之前，似乎應該要是「不明」才對呢。</p>\n<p><code class=\"language-text\">Optional</code> 這樣的設計就這樣誕生了。我們可以讓一個變數有 <code class=\"language-text\">nil</code>(空值) 存在的可能性。以剛才的例子來看即是：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">var</span> lover<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span><span class=\"token operator\">?</span> <span class=\"token comment\">// default value is nil</span></code></pre></div>\n<p>使用問號 <code class=\"language-text\">?</code> 來表達這個變數是Optional，這看起來挺直觀的，畢竟就是可能有值，也可能沒有值的狀態。\n在宣告完成後，由於我們沒有同時設定上initial value，這個 <em>lover</em> 就直接是 <code class=\"language-text\">nil</code> 了：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span>\n    <span class=\"token keyword\">var</span> lover<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Bool</span><span class=\"token operator\">?</span>\n\n    <span class=\"token keyword\">init</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> alice <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alice\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> alice<span class=\"token punctuation\">.</span>lover <span class=\"token operator\">==</span> <span class=\"token constant\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"is nil\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// is nil</span></code></pre></div>\n<p>然後我們想依據<code class=\"language-text\">lover</code>的值設定要顯示的訊息：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">alice<span class=\"token punctuation\">.</span>lover <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> alice<span class=\"token punctuation\">.</span>lover <span class=\"token operator\">?</span> <span class=\"token string\">\"give up\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"chance\"</span> <span class=\"token comment\">// Compile Error</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></code></pre></div>\n<p>當我們嘗試想要讀取<code class=\"language-text\">lover</code>時，出現了<em>Compile Error</em>，可是我們不是在前一行已經好好的賦予他一個值了嗎？</p>\n<p>這算是一種安全機制，Optional的變數內容是個黑盒子，我們並不知道他的內容是什麼，Swift不允許我們在打開盒子前就讀取其內容。</p>\n<hr>\n<h3>Forced Wrapping <code class=\"language-text\">!</code></h3>\n<p>我們嘗試使用第一種方式打開包裝：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\">alice<span class=\"token punctuation\">.</span>lover <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> alice<span class=\"token punctuation\">.</span>lover<span class=\"token operator\">!</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"give up\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"chance\"</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span> <span class=\"token comment\">// chance</span></code></pre></div>\n<p>這次沒有出現Compile Error了。我們在 <code class=\"language-text\">alice.lover</code> 後面加上了一個驚嘆號 <code class=\"language-text\">!</code>，這個 <code class=\"language-text\">!</code> 代表著 <strong>forced unwrapping</strong>，意旨我們在要使用的同時強制打開包裝把裡面的東西倒出來。</p>\n<p>但這樣的使用方式有個嚴重的問題，如果裡面沒有東西，也就是<code class=\"language-text\">nil</code>的話，程式就會產生<em>Runtime Error</em>。\n這是個嚴重的問題，就好比我們擅自翻閱Alice同學的聊天紀錄結果被她黑單了一樣，我們在嘗試做後續的行為之前，還是應該謹慎一點。</p>\n<h3><code class=\"language-text\">if let</code> and <code class=\"language-text\">guard let</code></h3>\n<p>我們可以用<code class=\"language-text\">if alice.lover != nil</code>謹慎的使用<code class=\"language-text\">if</code>來判斷這個Optional是不是<code class=\"language-text\">nil</code>，如果不是我們再使用<code class=\"language-text\">!</code>來打開包裝，但每次都這樣實在是有點麻煩又冗長。\n而Swift提供了一些語法糖來幫助我們解決這個問題：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> lover <span class=\"token operator\">=</span> alice<span class=\"token punctuation\">.</span>lover <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>lover <span class=\"token operator\">?</span> <span class=\"token string\">\"give up\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"chance\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* do something */</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用<code class=\"language-text\">if let</code>的話，可以在判斷後直接賦值，相當於檢查內容後直接拿到包裝內的東西。\n且這邊已賦值的<code class=\"language-text\">lover</code>因為已經知道沒有<code class=\"language-text\">nil</code>的可能了，並不是Optional，使用時可以不用在後面加上<code class=\"language-text\">!</code>。</p>\n<p>而在某些狀況下使用<code class=\"language-text\">guard let</code>會更加合適：</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">func</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token number\">_</span> person<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">guard</span> <span class=\"token keyword\">let</span> lover <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>lover <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>比方說這個在function中，如果我們不知道這個人到底有沒有情人，我們就不做任何事。\n使用<code class=\"language-text\">guard let</code>在檢查時直接賦值，若為<code class=\"language-text\">nil</code>則return。\n用法與<code class=\"language-text\">if let</code>類似，但<code class=\"language-text\">guard let</code>更適合用在提早return的場合。</p>\n<h3>Nil-Coalescing Operator</h3>\n<p>有時候我們遇到<code class=\"language-text\">nil</code>時也並不是要做甚麼複雜的處理，只是準備了個預設值來使用就好，那就可以使用 <code class=\"language-text\">??</code> 這個語法糖。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre class=\"language-swift\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> lover <span class=\"token operator\">=</span> alice<span class=\"token punctuation\">.</span>lover <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token boolean\">false</span>\n<span class=\"token comment\">// let lover = alice.lover != nil ? alice.lover! : false</span></code></pre></div>\n<p>在這個例子中，我們設定為「不知道alice有沒有男朋友，就當作沒有」來行動。這個語法就變得相當簡潔，萬一遇上<code class=\"language-text\">nil</code>時，也早已準備好預設值而不會出現<strong>Runtime Error</strong>。</p>\n<h2>總結</h2>\n<p>Swift使用了Optional型態來處理<code class=\"language-text\">nil</code>的問題，而對應的語法糖大致有以下：</p>\n<ol>\n<li>forced unwrapping <code class=\"language-text\">!</code></li>\n<li><code class=\"language-text\">if let</code> and <code class=\"language-text\">guard let</code></li>\n<li>Nil-Coalescing Operator <code class=\"language-text\">??</code></li>\n</ol>\n<p>另外還有這裡沒提到的<strong>Optional Chaining</strong>就再另外新增一篇筆記。</p>\n<hr>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://docs.swift.org/swift-book/LanguageGuide/OptionalChaining.html\">Swift Language Guide</a></li>\n<li><a href=\"https://www.appcoda.com.tw/swift-optional/\">初學Swift：愛恨交織的 Optional - Grady Zhuo</a></li>\n<li><a href=\"https://www.appcoda.com.tw/swift-optional-intro/\">Swift的問號與驚嘆號：可有可無的 Optional - 彼得潘</a></li>\n</ul>","frontmatter":{"date":"August 06, 2019","path":"/blog/2019-08-06-swift-optional","title":"Optional in Swift","tags":["swift","programming"]}}},"pageContext":{"next":{"frontmatter":{"path":"/blog/2019-12-21-git-rebase-squash","title":"使用git rebase合併commit"}},"prev":{"frontmatter":{"path":"/blog/2019-08-05-swift-on-windows-10","title":"Run Swift on Windows 10"}}}},"staticQueryHashes":["63159454"]}