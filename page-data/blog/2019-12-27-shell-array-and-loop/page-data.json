{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/2019-12-27-shell-array-and-loop","result":{"data":{"site":{"siteMetadata":{"title":"Miksin, Software Engineer","subtitles":["Hello! I am Miksin","I'm a Software Engineer","I'm Painting","I'm Programming","I come from TAIWAN"],"description":"Software Engineer","author":"Miksin","links":[{"name":"Home","path":"/"},{"name":"About","path":"/about"},{"name":"Blog","path":"/blog"}],"socialLinks":[{"name":"github","link":"https://github.com/miksin"},{"name":"twitter","link":"https://twitter.com/miksin_"},{"name":"instagram","link":"https://www.instagram.com/miksin_/"},{"name":"pixiv","link":"https://pixiv.me/miksin"},{"name":"youtube","link":"https://www.youtube.com/channel/UCmYleBoaTtNtPVZkaUwFxOw"}]}},"page":{"html":"<p>在 shell script 中，我們可以像其他程式語言一樣使用 array，也可以使用 for loop 來走訪 array 的每個元素。</p>\n<h2>Array 的基本用法</h2>\n<h3>宣告與存取</h3>\n<p>shell 中 array 的宣告與存取元素並沒有什麼特別之處，\n值得注意的是在 shell 中存取變數時要加上<code class=\"language-text\">${}</code>，\n例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">animals=(cat dog bird tiger lion)\necho ${animals[2]} # bird</code></pre></div>\n<p>而當我們直接存取宣告的變數時，會是存取到 array 的第一個元素：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">echo $animals # cat\necho ${animals[0]} # cat</code></pre></div>\n<p>若想要存取 array 中的所有內容的話，可以使用<code class=\"language-text\">@</code>或是<code class=\"language-text\">*</code>，\n但一般來說建議寫<code class=\"language-text\">@</code>，理由後面會說明：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">echo ${animals[@]} # cat dog bird tiger lion\necho ${animals[*]} # cat dog bird tiger lion</code></pre></div>\n<h3>範圍存取</h3>\n<p>如果有寫過 python 應該可以明白，\n在 python 中對 list 選擇範圍是很容易的事，\n其實在 shell 中也是能用類似的語法簡單做到的：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">echo ${animals[@]:1} # dog bird tiger lion\necho ${animals[@]:1:3} # cat dog bird tiger\necho ${animals[1]:1:3} # og</code></pre></div>\n<p>這種存取方法對普通的字串也是有用的</p>\n<h3>計算長度</h3>\n<p>計算 array 的數量非常簡單，在變數名前面加上<code class=\"language-text\">#</code>即可，這個方法在字串上也是可以用的：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">echo ${#array[@]} # 5\necho ${#array[0]} # 3</code></pre></div>\n<h2>在 for loop 使用 array</h2>\n<p>結合剛剛提過的存取元素的語法就可以簡單在 for loop 中使用：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">for animal in ${animals[@]}; do\n    echo $animal\ndone</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"># result\ncat\ndog\nbird\ntiger\nlion</code></pre></div>\n<p>但是這麼寫會有一個重大缺陷，當 array 元素出現空白等元素時，\n會造成結果不如預期，例如我們稍微換一下 array 中的元素：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">animals=(&quot;cat&quot; &quot;dog&quot; &quot;bird tiger&quot;)\nfor animal in ${animals[@]}; do\n    echo &quot;animal: $animal&quot;\ndone</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">#result\nanimal: cat\nanimal: dog\nanimal: bird\nanimal: tiger</code></pre></div>\n<p>本來預期執行三次的迴圈，因為空白的出現導致變成了四次，\n我們可以透過些微的修改迴圈的寫法來避免這樣的情形：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">animals=(&quot;cat&quot; &quot;dog&quot; &quot;bird tiger&quot;)\nfor animal in &quot;${animals[@]}&quot;; do\n    echo &quot;animal: $animal&quot;\ndone</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">#result\nanimal: cat\nanimal: dog\nanimal: bird tiger</code></pre></div>\n<p>在變數的兩側加上引號<code class=\"language-text\">&quot;</code>可以避免這樣的問題，結果就正確了</p>\n<h2>Appendix: <code class=\"language-text\">[@]</code>與<code class=\"language-text\">[*]</code>的差異</h2>\n<p>還記得前面說過的列出所有元素時可以使用<code class=\"language-text\">[@]</code>或是<code class=\"language-text\">[*]</code>嗎？\n事實上這兩種用法在某些情形下會有不同的行為，\n比方說剛剛的例子我們換成使用星號<code class=\"language-text\">*</code></p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">animals=(&quot;cat&quot; &quot;dog&quot; &quot;bird tiger&quot;)\nfor animal in &quot;${animals[*]}&quot;; do\n    echo &quot;animal: $animal&quot;\ndone</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">#result\nanimal: cat dog bird tiger</code></pre></div>\n<p>這是什麼東西？怎麼只執行了一次？\n但是若是去掉引號<code class=\"language-text\">&quot;</code>，這兩個的行為又完全一樣了。\n看來<code class=\"language-text\">@</code>與<code class=\"language-text\">*</code>有展開方式的差異，在大部分的時候使用<code class=\"language-text\">@</code>才會是符合預期的結果。\n詳情可以參考<a href=\"https://stackoverflow.com/questions/3348443/a-confusion-about-array-versus-array-in-the-context-of-a-bash-comple\">這裡</a>。</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/8880603/loop-through-an-array-of-strings-in-bash\">Loop through an array of strings in Bash?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/3348443/a-confusion-about-array-versus-array-in-the-context-of-a-bash-comple\">A confusion about ${array[*]} versus ${array[@]} in the context of a Bash completion</a></li>\n<li><a href=\"https://qiita.com/b4b4r07/items/e56a8e3471fb45df2f59\">bash 配列まとめ</a></li>\n</ul>","frontmatter":{"date":"December 27, 2019","path":"/blog/2019-12-27-shell-array-and-loop","title":"Array and Loop in Shell Script","tags":["shell","programming"]}}},"pageContext":{"next":{"frontmatter":{"path":"/blog/2020-01-10-freeze-and-seal","title":"JS中使用Object.freeze與Object.seal凍結物件"}},"prev":{"frontmatter":{"path":"/blog/2019-12-21-git-rebase-squash","title":"使用git rebase合併commit"}}}},"staticQueryHashes":["63159454"]}